
// vertical centering
//  .element p {
//      @include vertical-align();
//  }
@mixin vertical-align($position: relative, $horizontal: false) {
    position: $position;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -moz-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);

    @if $horizontal {
        left: 50%;
        -webkit-transform: translate(-50%, -50%);
        -moz-transform: translate(-50%, -50%);
        -ms-transform: translate(-50%), -50%;
        transform: translate(-50%,-50%);
    }
}


// element psudo states
//
// .element {
//     @include is-active {
//         border: 1px dotted red;
//     }
// }

@mixin is-active {
    &:hover,
    &:focus,
    &:active,
    &.active {
        outline: none;
        @content;
    }
}


// xBrowser placeholder sudo

// element {
//     @include placeholder {
//       font-family: $base-font-family;
//       color: red;
//     }
// }

@mixin placeholder {
    &::-webkit-input-placeholder {@content}
    &:-moz-placeholder           {@content}
    &::-moz-placeholder          {@content}
    &:-ms-input-placeholder      {@content}
}


// Transform vendor prefixes
// .element {
//   @include transform( translateX(400px) );
// }

@mixin transform($transforms) {
    -webkit-transform: $transforms;
    -moz-transform: $transforms;
    -ms-transform: $transforms;
    transform: $transforms;
}



// Create REM values with PX fall back
//
// Generate a REM with PX fallback from
// $baseFontSize. Enter the desired size based
// on pixels in numerical form. Supports shorthand.
//
// Usage: @include rem($property, $values);
// Example Usage:
//    @include rem(font-size, 16px);
//    @include rem(margin, 0 24px 0 12px);
//
// Outputs:
//    font-size: 16px;
//    font-size: 1.6rem;
//    margin: 0 24px 0 12px;
//    margin: 0 2.4rem 0 1.2rem;
// ----------------------------------
// $base-font-size defined in _varaibles

@function parseInt($n) {
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
    $px : ();
    $rem: ();

    $root: $base-font-size;

    @each $value in $values {
        @if $value == 0 or $value == auto {
            $px : append($px , $value);
            $rem: append($rem, $value);
        }

        @else if type-of($value) == number {
            $unit: unit($value);
            $val: parseInt($value);

            @if $unit == "px" {
                $px : append($px,  $value);
                $rem: append($rem, ($val / $root + rem));
            }

            @if $unit == "rem" {
                $px : append($px,  ($val * $root + px));
                $rem: append($rem, $value);
            }
        }

        @else {
            $px : append($px,  $value);
            $rem: append($rem, $value);
        }
    }

    @if $px == $rem {
        #{$property}: $px;
    } @else {
        #{$property}: $px;
        #{$property}: $rem;
    }
}

@function rem($value) {
    $root: $base-font-size;
    $val: parseInt($value);
    $return: ();

    @if unit($value) == "px" {
        $return: append($return, ($val / $root + rem));
    } @else {
        $return: append($return, ($val * $root + px));
    }

    @return $return;
}